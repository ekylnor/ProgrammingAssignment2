search()
install.packages("KernSmooth")
library(KernSmooth)
exit
quit()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x=seq(1,10,len=20)
x
x=seq(1,10,len=19)
x
plot(x,2*x)
fecha=Sys.info()
fecha
fecha=Sys.now()
fecha=Sys.time()
fecha
plot(x,fecha)
plot(fecha)
z<-c(1.1,9,3.14)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
A=matrix(1:4,2,2)
A
solve(A)
A%*%solve(A)
A%*solve(A)
A*solve(A)
A*solve(A)
?interaction
?gl
library(datasets)
data("iris")
?iris
head(iris)
mean(iris$Sepal.Length)
?labels
labels(iris$Species)
iris$Species
levels(iris$Species)
?factor
?gf
?gl
?tapply
tapply(iris,iris$Species,mean)
split(iris,iris$Species)
split(iris,iris$Species)$virginica
colmeans(split(iris,iris$Species)$virginica)
colMeans(split(iris,iris$Species)$virginica)
?colMeans
colMeans(split(iris,iris$Species)$virginica["Sepal.Length"])
lapply(split(iris,iris$Species)$virginica, fu)
head(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
head(mtcars)
lapply(mtcars, mean)
split(mtcars$mpg, mtcars$cyl)
colMeans(split(iris,iris$Species)$virginica["Sepal.Length"])
colMeans(split(iris$Sepal.Length,iris$Species)$virginica)
mean(split(iris$Sepal.Length,iris$Species)$virginica)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl),mean)
head(mtcars)
sapply(split(mtcars$hp, mtcars$cyl),mean)
hp_per_cyl=sapply(split(mtcars$hp, mtcars$cyl),mean)
abs(hp_per_cyl$4-hp_per_cyl$8)
abs(hp_per_cyl$"4"-hp_per_cyl$"8")
abs(hp_per_cyl["4"]-hp_per_cyl["8"])
debug(ls)
ls
debug(ls)
ls
n
setwd("~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2")
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachevector.R')
makeVector(1)
z<-makevector()
z<-makevector(1)
pwd
cd
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachevector.R')
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachevector.R')
z<-makeVector(1)
z
z<-makeVector()
z
z$set(1,2,3)
z$set(c(1,2,3))
z$get()
z$getmean()
z$getmean()
z$setmean()=mean(z)
z$setmean()=mean(z$get())
z$setmean()=mean(z$get)
z$get()
mean(z$get())
z$setmean(mean(z$get()))
z$getmean()
w<-makeVector(c(1,2,3,4,5))
w
w$get()
w$getmean()
?<<-
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
z<-makeCacheMatrix(matrix(1:4,2,2))
z$get()
z$getInverse()
cacheSolve(z)
z$getInverse()
z$get()%*%z$getInverse()
z$getInverse()%*%z$get()
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
?solve
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
source('~/Nucleo/academia/formacion/githubRepos/ProgrammingAssignment2/cachematrix.R')
